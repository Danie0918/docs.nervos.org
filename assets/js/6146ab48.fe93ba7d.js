"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7039],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,b=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(b,i(i({ref:t},c),{},{components:n})):r.createElement(b,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6932:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],l={id:"monitor-nodes",title:"Monitor Nodes With CKBGuardian"},s=void 0,p={unversionedId:"basics/guides/monitor-nodes",id:"basics/guides/monitor-nodes",title:"Monitor Nodes With CKBGuardian",description:"CKBGuardian is a RPC status monitor for CKB public nodes. It can also check whether CKB and CKB proxy have been started properly. Its purpose is to verify the connectivity of the RPC, not the validity of the results.",source:"@site/docs/basics/guides/monitor-nodes.md",sourceDirName:"basics/guides",slug:"/basics/guides/monitor-nodes",permalink:"/docs/basics/guides/monitor-nodes",draft:!1,editUrl:"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/basics/guides/monitor-nodes.md",tags:[],version:"current",frontMatter:{id:"monitor-nodes",title:"Monitor Nodes With CKBGuardian"},sidebar:"Basics",previous:{title:"Run a CKB Mainnet Node and Testnet Node with Docker",permalink:"/docs/basics/guides/run-ckb-with-docker"},next:{title:"Get CKB Binary",permalink:"/docs/basics/guides/get-ckb"}},c={},d=[{value:"Local Testting",id:"local-testting",level:2},{value:"Daily Monitoring with GitHub Action",id:"daily-monitoring-with-github-action",level:2}],u={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://cryptape.github.io/CkbGuardian/index.html"},"CKBGuardian")," is a RPC status monitor for CKB public nodes. It can also check whether CKB and CKB proxy have been started properly. Its purpose is to verify the connectivity of the RPC, not the validity of the results."),(0,a.kt)("h2",{id:"local-testting"},"Local Testting"),(0,a.kt)("p",null,"Step 1: Clone Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git clone https://github.com/cryptape/CkbGuardian.git\n")),(0,a.kt)("p",null,"Step 2: Add Check Node Message"),(0,a.kt)("p",null,"Modify the ",(0,a.kt)("inlineCode",{parentName:"p"},"rpc")," field only."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'echo "[\n  {\n    \\"name\\": \\"public\\",\n    \\"url\\": \\"web url\\",\n    \\"network\\": \\"MIRANA\\",\n    \\"rpc\\": \\"http://localhost:8114\\",\n    \\"excludeMethods\\": [\\"send_alert\\",\\"clear_banned_addresses\\",\\"set_ban\\",\\"set_network_active\\",\\"add_node\\",\\"remove_node\\",\\"remove_transaction\\",\\"clear_tx_pool\\",\\"subscribe\\",\\"unsubscribe\\"]\n  }\n]" > CkbGuardian/ckb/resource/ckb.json\n')),(0,a.kt)("p",null,"Step 3: Run Test"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd CkbGuardian/ckb\nnpm i\nnpm run test\n")),(0,a.kt)("h2",{id:"daily-monitoring-with-github-action"},"Daily Monitoring with GitHub Action"),(0,a.kt)("p",null,"To add a new node to CKBGuardian:"),(0,a.kt)("p",null,"Step 1: Edit this ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cryptape/CkbGuardian/blob/main/ckb/resource/ckb.json"},"JSON file")," by adding the relevant information for the new node. "),(0,a.kt)("p",null,"Step 2: Fill in the following fields in the ",(0,a.kt)("inlineCode",{parentName:"p"},"CkbNodeConfig")," class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"export class CkbNodeConfig {\n    name: string.  // server name\n    url: string.   // server url \n    network: string. // now noly support main \n    rpc: string.     // rpc url \n    apiKeyName: string. // if need api-key \n    excludeMethods: string[]. // service not support methods \n}\n")),(0,a.kt)("p",null,"Step 3: Once you have updated the file, send a pull request."),(0,a.kt)("p",null,"Here is ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cryptape/CkbGuardian/pull/2/commits/a2dcefed7a61fbfa40d89564a9e8520dd7bc2cd2"},"an example"),"."),(0,a.kt)("p",null,"If an API key is needed to connect to CKB service, follow these steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add ",(0,a.kt)("inlineCode",{parentName:"p"},"apikeyName"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"SERVICE_API_KEY"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add ",(0,a.kt)("inlineCode",{parentName:"p"},"[.env](https://github.com/gpBlockchain/CkbGuardian/blob/main/ckb/.env)")," and fill out the ",(0,a.kt)("inlineCode",{parentName:"p"},"SERVICE_API_KEY")," "))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'GET_BLOCK_API_KEY=""\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Modify the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cryptape/CkbGuardian/blob/main/.github/workflows/check-node.yml#L45-L46"},"relevant workflow"),".")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Contact the project administrator to add the action secret."))))}m.isMDXComponent=!0}}]);