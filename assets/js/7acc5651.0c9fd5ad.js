"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6592],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),i=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=i(n),m=a,h=d["".concat(o,".").concat(m)]||d[m]||u[m]||l;return n?r.createElement(h,c(c({ref:t},p),{},{components:n})):r.createElement(h,c({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,c=new Array(l);c[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var i=2;i<l;i++)c[i]=n[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2341:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),c=["components"],s={id:"capsule-exec",title:"Exec syscall in Capsule"},o=void 0,i={unversionedId:"labs/capsule-exec",id:"labs/capsule-exec",title:"Exec syscall in Capsule",description:"Introduction",source:"@site/docs/labs/capsule-exec.md",sourceDirName:"labs",slug:"/labs/capsule-exec",permalink:"/docs/labs/capsule-exec",draft:!1,editUrl:"https://github.com/nervosnetwork/docs-new/tree/develop/website/docs/labs/capsule-exec.md",tags:[],version:"current",frontMatter:{id:"capsule-exec",title:"Exec syscall in Capsule"},sidebar:"Labs",previous:{title:"Introduction to Lumos via NervosDAO",permalink:"/docs/labs/lumos-nervosdao"},next:{title:"Dynamic loading in Capsule",permalink:"/docs/labs/capsule-dynamic-loading-tutorial"}},p={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Setup the develop environment",id:"setup-the-develop-environment",level:2},{value:"Install capsule",id:"install-capsule",level:3},{value:"Create a project",id:"create-a-project",level:2},{value:"Write echo sub-script",id:"write-echo-sub-script",level:2},{value:"Write exec demo script",id:"write-exec-demo-script",level:2},{value:"Testing",id:"testing",level:2},{value:"Other resources",id:"other-resources",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,c);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0034-vm-syscalls-2/0034-vm-syscalls-2.md#exec"},"Exec")," is a new syscall provided by ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0037-ckb2021/0037-ckb2021.md"},"ckb2021"),". To understand what exec syscall does, we recommend reading ",(0,l.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man3/exec.3.html"},"this article")," first. In short: Exec runs an executable file from specified cell data in the context of an already existing VM, replacing the previous executable. The used cycles do not change, but the code, registers, and memory of the VM are replaced by those of the new program, meaning ",(0,l.kt)("strong",{parentName:"p"},"control flow will never return to the main script"),"."),(0,l.kt)("p",null,"You can imagine exec as a router. When some conditions are met, the main script will completely hand over control to a certain sub-script."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"              \u250c--\x3e if State1 --\x3e Exec(Sub-script1)\nMain script --+--\x3e if State2 --\x3e Exec(Sub-script2)\n              \u2514--\x3e if State3 --\x3e Exec(Sub-script3)\n")),(0,l.kt)("p",null,"Compared with ",(0,l.kt)("a",{parentName:"p",href:"https://docs.nervos.org/docs/labs/capsule-dynamic-loading-tutorial/"},"Dynamic libraries"),", exec has the following significant advantages:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"All sub-scripts are complete scripts. They can be used alone, or they can be called by exec."),(0,l.kt)("li",{parentName:"ul"},"Sub-scripts have a separate 4M memory space."),(0,l.kt)("li",{parentName:"ul"},"Allow passing in arguments.")),(0,l.kt)("p",null,"At the same time Exec has the following limitations:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Never return."),(0,l.kt)("li",{parentName:"ul"},"Hard to exchange data between scripts.")),(0,l.kt)("p",null,"When dynamic libraries and exec syscall both meet your needs, we recommend that you use exec instead of dynamic libraries."),(0,l.kt)("p",null,"In this tutorial, we'll write two scripts in Rust, and exec one script into the other."),(0,l.kt)("h2",{id:"setup-the-develop-environment"},"Setup the develop environment"),(0,l.kt)("p",null,"This tutorial targets cpasule 0.9 and ckb-std 0.12."),(0,l.kt)("h3",{id:"install-capsule"},"Install capsule"),(0,l.kt)("p",null,"The installation steps can refer to ",(0,l.kt)("a",{parentName:"p",href:"https://docs.nervos.org/docs/labs/capsule-dynamic-loading-tutorial#install-capsule"},"here"),"."),(0,l.kt)("h2",{id:"create-a-project"},"Create a project"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"$ capsule new ckb-exec-demo\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"(click here to view response)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'New project "ckb-exec-demo"\nCreated file "capsule.toml"\nCreated file "deployment.toml"\nCreated file "README.md"\nCreated file "Cargo.toml"\nCreated file ".gitignore"\nInitialized empty Git repository in /tmp/ckb-exec-demo/.git/\nCreated "/tmp/ckb-exec-demo"\nCreated tests\n     Created library `tests` package\nNew contract "ckb-exec-demo"\n     Created binary (application) `ckb-exec-demo` package\nRewrite Cargo.toml\nRewrite capsule.toml\nDone\n'))),(0,l.kt)("p",null,"Let's create the second contract named ",(0,l.kt)("inlineCode",{parentName:"p"},"echo"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"$ cd ckb-exec-demo\n$ capsule new-contract echo\n")),(0,l.kt)("details",null,(0,l.kt)("summary",null,"(click here to view response)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'New contract "echo"\n     Created binary (application) `echo` package\nRewrite Cargo.toml\nRewrite capsule.toml\nDone\n'))),(0,l.kt)("p",null,"If you are using an older version of capsule, you may need to update the ckb-std dependency manually:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="contracts/echo/Cargo.toml"',title:'"contracts/echo/Cargo.toml"'},'ckb-std = "0.12.1"\n')),(0,l.kt)("h2",{id:"write-echo-sub-script"},"Write echo sub-script"),(0,l.kt)("p",null,"Put the following code into ",(0,l.kt)("inlineCode",{parentName:"p"},"contracts/echo/src/main.rs"),", replacing the existing ",(0,l.kt)("inlineCode",{parentName:"p"},"program_entry")," function. As you can see, the script always returns 0 if argc is 0, which means that if the script is used as a alone lock script, anyone can unlock this cell. If echo used as a sub-script of exec, it will parse the first argument and use that as the exit code."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"fn program_entry() -> i8 {\n    let argv = ckb_std::env::argv();\n    // This script will always return 0 if used alone.\n    if argv.len() == 0 {\n        return 0;\n    };\n\n    // When calling the script by exec and passing in the arguments.\n    let arg1 = argv[0].to_str().unwrap();\n    let exit = arg1.parse::<i8>().unwrap();\n    return exit;\n}\n")),(0,l.kt)("h2",{id:"write-exec-demo-script"},"Write exec demo script"),(0,l.kt)("p",null,"Put the following code into ",(0,l.kt)("inlineCode",{parentName:"p"},"contracts/ckb-exec-demo/src/main.rs"),", replacing the existing ",(0,l.kt)("inlineCode",{parentName:"p"},"program_entry")," function:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use core::ffi::CStr;\nuse ckb_std::{ckb_constants::Source, syscalls::exec};\n\nfn program_entry() -> i8 {\n    let r = exec(\n        0,\n        Source::CellDep,\n        0,\n        0,\n        &[&CStr::from_bytes_with_nul(b"42\\0").unwrap()],\n    );\n    if r != 0 {\n        return 10;\n    }\n    return 0;\n}\n')),(0,l.kt)("p",null,"This script does only one thing: When executing ",(0,l.kt)("inlineCode",{parentName:"p"},"exec(...)"),", CKB-VM will look for the first dep_cell, and execute the code in it."),(0,l.kt)("h2",{id:"testing"},"Testing"),(0,l.kt)("p",null,"We need to deploy the ",(0,l.kt)("inlineCode",{parentName:"p"},"echo")," to a cell, then reference the cell in the testing transaction. Replace the content of ",(0,l.kt)("inlineCode",{parentName:"p"},"tests/src/tests.rs"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use super::*;\nuse ckb_testtool::ckb_error::Error;\nuse ckb_testtool::ckb_types::{bytes::Bytes, core::TransactionBuilder, packed::*, prelude::*};\nuse ckb_testtool::context::Context;\n\nconst MAX_CYCLES: u64 = 10_000_000;\n\nfn assert_script_error(err: Error, err_code: i8) {\n    let error_string = err.to_string();\n    assert!(\n        error_string.contains(format!("error code {} ", err_code).as_str()),\n        "error_string: {}, expected_error_code: {}",\n        error_string,\n        err_code\n    );\n}\n\n#[test]\nfn test_success() {\n    // deploy contract\n    let mut context = Context::default();\n    let contract_bin: Bytes = Loader::default().load_binary("ckb-exec-demo");\n    let out_point = context.deploy_cell(contract_bin);\n\n    let echo_bin: Bytes = Loader::default().load_binary("echo");\n    let echo_out_point = context.deploy_cell(echo_bin);\n    let echo_dep = CellDep::new_builder().out_point(echo_out_point).build();\n\n    // prepare scripts\n    let lock_script = context\n        .build_script(&out_point, Default::default())\n        .expect("script");\n\n    // prepare cells\n    let input_out_point = context.create_cell(\n        CellOutput::new_builder()\n            .capacity(1000u64.pack())\n            .lock(lock_script.clone())\n            .build(),\n        Bytes::new(),\n    );\n    let input = CellInput::new_builder()\n        .previous_output(input_out_point)\n        .build();\n    let outputs = vec![\n        CellOutput::new_builder()\n            .capacity(500u64.pack())\n            .lock(lock_script.clone())\n            .build(),\n        CellOutput::new_builder()\n            .capacity(500u64.pack())\n            .lock(lock_script)\n            .build(),\n    ];\n\n    let outputs_data = vec![Bytes::new(); 2];\n\n    // build transaction\n    let tx = TransactionBuilder::default()\n        .input(input)\n        .outputs(outputs)\n        .outputs_data(outputs_data.pack())\n        .cell_dep(echo_dep)\n        .build();\n    let tx = context.complete_tx(tx);\n\n    // run\n    let err = context.verify_tx(&tx, MAX_CYCLES).unwrap_err();\n    assert_script_error(err, 42);\n}\n')),(0,l.kt)("p",null,"Run ",(0,l.kt)("inlineCode",{parentName:"p"},"capsule test"),"."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"(click here to view response)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Finished test [unoptimized + debuginfo] target(s) in 1.71s\n     Running unittests src/lib.rs (target/debug/deps/tests-c051885699f8b848)\nrunning 1 test\ntest tests::test_success ... ok\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.52s\n"))),(0,l.kt)("h2",{id:"other-resources"},"Other resources"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0034-vm-syscalls-2/0034-vm-syscalls-2.md#exec"},"Exec syscall")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://docs.rs/ckb-std/0.12.1/ckb_std/high_level/fn.exec_cell.html"},"Ckb-std exec_cell function")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://docs.rs/ckb-std/0.12.1/ckb_std/env/fn.argv.html"},"Ckb-std argv function")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://docs.rs/ckb-std/latest/ckb_std/syscalls/fn.exec.html"},"Ckb-std exec syscall"))),(0,l.kt)("p",null,"In this article, we use the index to locate sub-scripts. If you want to use the script hash to locate, you can refer to our:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/nervosnetwork/ckb-c-stdlib/blob/8d56515e726c63b7f9811e10914dbe930d1ea134/ckb_syscalls.h#L368-L378"},"C language implementation")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/nervosnetwork/ckb-std/tree/c660da768df85fa2b0fe78673278d49425ce6333/contracts/exec-caller-by-code-hash"},"Rust language implementation"))))}m.isMDXComponent=!0}}]);